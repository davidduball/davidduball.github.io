<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The 4th Annual Pool Unlike Any Other - Masters 2025</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f5f5f5;
            font-family: 'Georgia', serif;
        }
        .header {
            background-color: #006747;
            color: white;
            padding: 20px 0;
            margin-bottom: 30px;
        }
        .header h1 {
            font-weight: bold;
        }
        .card {
            margin-bottom: 20px;
            border: none;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .card-header {
            background-color: #006747;
            color: white;
            font-weight: bold;
        }
        .nav-tabs .nav-link.active {
            font-weight: bold;
            background-color: #f8f9fa;
            border-bottom: 2px solid #006747;
        }
        .table th {
            background-color: #e9f2ef;
        }
        .refresh-time {
            font-size: 0.8rem;
            color: #666;
            text-align: right;
            margin-top: 10px;
        }
        .table-striped tbody tr:nth-of-type(odd) {
            background-color: rgba(0, 103, 71, 0.05);
        }
        .footer {
            background-color: #343a40;
            color: white;
            padding: 20px 0;
            margin-top: 30px;
        }
    </style>
</head>
<body>
    <div class="header text-center">
        <div class="container">
            <h1>The 4th Annual Pool Unlike Any Other</h1>
            <h3>Masters 2025</h3>
        </div>
    </div>

    <div class="container">
        <ul class="nav nav-tabs mb-4" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="leaderboard-tab" data-bs-toggle="tab" data-bs-target="#leaderboard" type="button" role="tab" aria-controls="leaderboard" aria-selected="true">Leaderboard</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="picks-tab" data-bs-toggle="tab" data-bs-target="#picks" type="button" role="tab" aria-controls="picks" aria-selected="false">Participant Picks</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="props-tab" data-bs-toggle="tab" data-bs-target="#props" type="button" role="tab" aria-controls="props" aria-selected="false">Prop Bets</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="rules-tab" data-bs-toggle="tab" data-bs-target="#rules" type="button" role="tab" aria-controls="rules" aria-selected="false">Rules</button>
            </li>
        </ul>

        <div class="tab-content" id="myTabContent">
            <!-- Leaderboard Tab -->
            <div class="tab-pane fade show active" id="leaderboard" role="tabpanel" aria-labelledby="leaderboard-tab">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span>Current Standings</span>
                        <button id="refreshBtn" class="btn btn-sm btn-light">Refresh Scores</button>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Rank</th>
                                        <th>Name</th>
                                        <th>Total Score</th>
                                        <th>Team Score</th>
                                        <th>Props</th>
                                        <th>Details</th>
                                    </tr>
                                </thead>
                                <tbody id="standingsBody">
                                    <!-- Standings will be populated via JavaScript -->
                                </tbody>
                            </table>
                        </div>
                        <div class="refresh-time" id="lastUpdated">Last updated: Not yet updated</div>
                    </div>
                </div>
            </div>

            <!-- Picks Tab -->
            <div class="tab-pane fade" id="picks" role="tabpanel" aria-labelledby="picks-tab">
                <div class="card">
                    <div class="card-header">Participant Picks</div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>AAA</th>
                                        <th>AA</th>
                                        <th>A (1)</th>
                                        <th>A (2)</th>
                                        <th>BBB (1)</th>
                                        <th>BBB (2)</th>
                                        <th>BB</th>
                                        <th>B</th>
                                        <th>CCC</th>
                                        <th>D</th>
                                    </tr>
                                </thead>
                                <tbody id="picksBody">
                                    <!-- Picks will be populated via JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Props Tab -->
            <div class="tab-pane fade" id="props" role="tabpanel" aria-labelledby="props-tab">
                <div class="card">
                    <div class="card-header">Prop Bets Results</div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Hoffman in Field?</th>
                                        <th>Best LIV Team</th>
                                        <th>Someone other than Scottie/Rory?</th>
                                        <th>Low Apostle</th>
                                        <th>Low Old Timer</th>
                                        <!-- More prop questions would go here -->
                                    </tr>
                                </thead>
                                <tbody id="propsBody">
                                    <!-- Prop bets will be populated via JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Rules Tab -->
            <div class="tab-pane fade" id="rules" role="tabpanel" aria-labelledby="rules-tab">
                <div class="card">
                    <div class="card-header">Rules</div>
                    <div class="card-body">
                        <h5>Scoring System</h5>
                        <p>The Masters Pool works as follows:</p>
                        <ul>
                            <li>Each participant selects 10 golfers across different tiers</li>
                            <li>The top 6 scores from your team count toward your total</li>
                            <li>Prop bet questions can deduct points from your total if answered correctly</li>
                            <li>The participant with the lowest total score wins</li>
                        </ul>
                        
                        <h5>Tiers Explanation</h5>
                        <ul>
                            <li><strong>AAA</strong> - Top tier players (choose 1)</li>
                            <li><strong>AA</strong> - Second tier players (choose 1)</li>
                            <li><strong>A</strong> - Third tier players (choose 2)</li>
                            <li><strong>BBB</strong> - Fourth tier players (choose 2)</li>
                            <li><strong>BB</strong> - Fifth tier players (choose 1)</li>
                            <li><strong>B</strong> - Sixth tier players (choose 1)</li>
                            <li><strong>CCC</strong> - Seventh tier players (choose 1)</li>
                            <li><strong>D</strong> - Eighth tier players (choose 1)</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="footer">
        <div class="container text-center">
            <p>The 4th Annual Pool Unlike Any Other - Masters 2025</p>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Sample participant data from the CSV
        const participants = [
            {
                name: "Derek",
                picks: {
                    AAA: "Rory McIlroy (+650)",
                    AA: "Collin Morikawa (+1800)",
                    A1: "Joaquin Niemann (+2800)",
                    A2: "Viktor Hovland (+3500)",
                    BBB1: "Tony Finau (+7000)",
                    BBB2: "Wyndham Clark (+8000)",
                    BB: "Maverick McNealy (+15000)",
                    B: "Max Homa (+20000)",
                    CCC: "Jose Luis Ballester (a) - US Amateur champion (+50000)",
                    D: "Noah Kent (a) - US Amateur runner-up (+70000)"
                },
                props: {
                    hoffmanInField: "No",
                    bestLIVTeam: "Crushers (Bryson DeChambeau)",
                    otherThanScottieRory: "Everyone else",
                    lowApostle: "Tommy Fleetwood",
                    lowOldTimer: "Phil Mickelson"
                }
            },
            {
                name: "Oliver Nasr",
                picks: {
                    AAA: "Scottie Scheffler (+350)",
                    AA: "Bryson DeChambeau (+2000)",
                    A1: "Hideki Matsuyama (+2800)",
                    A2: "Viktor Hovland (+3500)",
                    BBB1: "Tony Finau (+7000)",
                    BBB2: "Wyndham Clark (+8000)",
                    BB: "Michael Kim (+13000)",
                    B: "Cameron Young (+20000)",
                    CCC: "Nico Echavarria (+30000)",
                    D: "Noah Kent (a) - US Amateur runner-up (+70000)"
                },
                props: {
                    hoffmanInField: "No",
                    bestLIVTeam: "Legion XII (Tyrell Hatton, Jon Rahm)",
                    otherThanScottieRory: "Everyone else",
                    lowApostle: "Jon Rahm",
                    lowOldTimer: "Angel Cabrera"
                }
            },
            // Additional participants would be added here
        ];

        // Mock golf scores from ESPN (would be fetched in real implementation)
        const golfScores = {
            "Scottie Scheffler": -8,
            "Rory McIlroy": -6,
            "Collin Morikawa": -5,
            "Bryson DeChambeau": -4,
            "Viktor Hovland": -3,
            "Joaquin Niemann": -2,
            "Hideki Matsuyama": -1,
            "Tony Finau": 0,
            "Wyndham Clark": 1,
            "Max Homa": 2,
            "Cameron Young": 3,
            "Maverick McNealy": 4,
            "Michael Kim": 5,
            "Jose Luis Ballester": 6,
            "Nico Echavarria": 7,
            "Noah Kent": 8
        };

        // Function to calculate scores and populate leaderboard
        function updateLeaderboard() {
            const standingsBody = document.getElementById('standingsBody');
            const picksBody = document.getElementById('picksBody');
            const propsBody = document.getElementById('propsBody');
            
            // Clear existing rows
            standingsBody.innerHTML = '';
            picksBody.innerHTML = '';
            propsBody.innerHTML = '';
            
            // Process participant data and calculate scores
            const standings = participants.map(participant => {
                // Calculate team score (normally would get top 6 players)
                let teamScore = 0;
                const playerScores = [];
                
                // Add all player scores
                if (golfScores[participant.picks.AAA.split(" ")[0] + " " + participant.picks.AAA.split(" ")[1]] !== undefined) {
                    playerScores.push({
                        name: participant.picks.AAA.split(" ")[0] + " " + participant.picks.AAA.split(" ")[1],
                        score: golfScores[participant.picks.AAA.split(" ")[0] + " " + participant.picks.AAA.split(" ")[1]]
                    });
                }
                
                if (golfScores[participant.picks.AA.split(" ")[0] + " " + participant.picks.AA.split(" ")[1]] !== undefined) {
                    playerScores.push({
                        name: participant.picks.AA.split(" ")[0] + " " + participant.picks.AA.split(" ")[1],
                        score: golfScores[participant.picks.AA.split(" ")[0] + " " + participant.picks.AA.split(" ")[1]]
                    });
                }
                
                // Get top 6 scores (logic to be expanded in real implementation)
                playerScores.sort((a, b) => a.score - b.score);
                const topScores = playerScores.slice(0, 6);
                teamScore = topScores.reduce((sum, player) => sum + player.score, 0);
                
                // Mock prop bets score for now
                const propsScore = -2; // Would calculate based on correct prop answers
                
                // Total score
                const totalScore = teamScore + propsScore;
                
                return {
                    name: participant.name,
                    teamScore: teamScore,
                    propsScore: propsScore,
                    totalScore: totalScore
                };
            });
            
            // Sort standings by total score (lowest first)
            standings.sort((a, b) => a.totalScore - b.totalScore);
            
            // Populate standings table
            standings.forEach((standing, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${standing.name}</td>
                    <td>${standing.totalScore}</td>
                    <td>${standing.teamScore}</td>
                    <td>${standing.propsScore}</td>
                    <td><button class="btn btn-sm btn-outline-primary">View</button></td>
                `;
                standingsBody.appendChild(row);
            });
            
            // Populate picks table
            participants.forEach(participant => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${participant.name}</td>
                    <td>${participant.picks.AAA.split(" ")[0] + " " + participant.picks.AAA.split(" ")[1]}</td>
                    <td>${participant.picks.AA.split(" ")[0] + " " + participant.picks.AA.split(" ")[1]}</td>
                    <td>${participant.picks.A1.split(" ")[0] + " " + participant.picks.A1.split(" ")[1]}</td>
                    <td>${participant.picks.A2.split(" ")[0] + " " + participant.picks.A2.split(" ")[1]}</td>
                    <td>${participant.picks.BBB1.split(" ")[0] + " " + participant.picks.BBB1.split(" ")[1]}</td>
                    <td>${participant.picks.BBB2.split(" ")[0] + " " + participant.picks.BBB2.split(" ")[1]}</td>
                    <td>${participant.picks.BB.split(" ")[0] + " " + participant.picks.BB.split(" ")[1]}</td>
                    <td>${participant.picks.B.split(" ")[0] + " " + participant.picks.B.split(" ")[1]}</td>
                    <td>${participant.picks.CCC.split(" ")[0] + " " + participant.picks.CCC.split(" ")[1]}</td>
                    <td>${participant.picks.D.split(" ")[0] + " " + participant.picks.D.split(" ")[1]}</td>
                `;
                picksBody.appendChild(row);
            });
            
            // Populate props table
            participants.forEach(participant => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${participant.name}</td>
                    <td>${participant.props.hoffmanInField}</td>
                    <td>${participant.props.bestLIVTeam}</td>
                    <td>${participant.props.otherThanScottieRory}</td>
                    <td>${participant.props.lowApostle}</td>
                    <td>${participant.props.lowOldTimer}</td>
                `;
                propsBody.appendChild(row);
            });
            
            // Update last updated time
            document.getElementById('lastUpdated').textContent = `Last updated: ${new Date().toLocaleString()}`;
        }

        // Function to fetch live scores from ESPN
        async function fetchESPNScores() {
            // In a real implementation, you would fetch data from ESPN API
            // This is a placeholder for demonstration
            console.log("Fetching scores from ESPN...");
            
            // Mock data update (in real implementation, would parse ESPN data)
            golfScores["Rory McIlroy"] = -7; // Example of updating a score
            
            updateLeaderboard();
        }

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            // Initial update
            updateLeaderboard();
            
            // Set up refresh button
            document.getElementById('refreshBtn').addEventListener('click', fetchESPNScores);
            
            // Auto-refresh every 5 minutes (300000 ms)
            setInterval(fetchESPNScores, 300000);
        });
    </script>
</body>
</html>
